对应中断优先级：1.定时器7更新中断     20
                2.定时器1更新中断     13
				3.定时器1捕获中断     12
				4.CAN中断             11
				5.USART中断           10
				6.USART2中断          01
				7.定时器6更新中断     21
				8.定时器5更新中断     00
				9.定时器4更新中断     10
				
定时器使用情况：使用了基本定时器6,7
                      普通定时器5,4
                      高级定时器1

进程优先级和延时时间：
static void AppTaskCreate(void);                                           1			无	   
static void SPEED_Task(void* parameter);                                   14           3                      
static void OIL_Task(void* parameter);                                     13			500                                   
static void CAN_Task(void* parameter);                                     12			200
static void USART_Task(void* parameter);                                   5			10100
static void Mileage_count_Task(void* parameter);                           4			无
static void SD_RWTask(void* parameter);                                    11			1010
static void Battery_capacity_Task(void* parameter);                        3 			30050
static void CPU_Task(void* pvParameters);                                  15			1000 
static void OneNET_4G_DTU_Task(void* pvParameters);                        6			3510
static void DTU_4G_Task(void* pvParameters);                          	   9			20050 
static void RingBuffer_Read_Task(void* pvParameters);                      8			3
static void IWDG_Task(void* pvParameters);                                 16           无

2022.5.10
CAN总线通讯，不能与仪表正常通讯，估计与芯片和硬件有关，u5在配置CAN时，未配置GPIO的输出速度，默认低速，在u5的仪表上能正常通讯，
而u12的板子上不能正常通讯，所以在配置CAN通讯是应配置为高速加上拉输入（保障足够的电流驱动能力），保障CAN正常通讯。

2022.5.23
移植FreeRTOS操作系统

2022.6.17
将原来的T时间测速法更换为M/T脉冲测速法，提高了速度的准确性，大大降低了T算法在测量高速段时的误差。

2022.6.25
对无线串口传输添加，启动与关闭事件：
启动秘钥                            0x1a
关闭秘钥                            0x2a


2022.8.20
移植文件系统：
错现了一些莫名的问题
1.使用vct6型号的芯片，在笔译过程中会出现flash不够用的情况，编译不通过。
从936支持中文改为437支持英文，理应该会大大减小flash，不会出现flash不够的情况，
但仍然编译不通过，将其改为vet6，512kB的就行，在去查看flash使用情况，发现936
并未超出flash上线，所以怀疑是软件自身问题，将其拷贝到vct6芯片上可以正常运行。
2.在读写文件函数中，数组均为局部变量，导致堆栈溢出，后将其数组定位全局变量。
3.在触发串口打印函数时，每次触发后，堆栈溢出，这就十分奇怪，因为串口打印函数，
并未创建局部变量，后通过修改写入SD卡进程初始化加大堆栈大小后，回复正常。
怀疑是读写文件耗时长，每次中断均落在读写文件的进程中导致堆栈无法释放，从而导致
堆栈溢出。

2022.9.02
增加里程记录功能，数据实时更新至SD卡中

2022.9.10
增加电量显示功能
拟定电压范围（2.85~3.27v）
6格电量显示：以80%-60%-40%-20%-5%比例设计
满电量       Battery >3270 mv
5格电量      3190 < Battery < 3270 mv
4格电量      3100 < Battery < 3190 mv
3格电量      3020 < Battery < 3100 mv
2格电量      2930 < Battery < 3020 mv
1格电量      2870 < Battery < 2930 mv
0格电量      Battery < 2850 mv

2022.9.15
增加电源管理，在电量小于2格时，VCU进入待机模式。


2022.10.8
增加4G DTU模块，实现4G收发数据功能，实时时钟更新功能，4G信号显示功能

使用ONENET中国移动物联网平台

满格信号     CSQvalue >14
4格信号      9 < CSQvalue <= 14
3格信号      5 < CSQvalue <= 9
2格信号      2 < CSQvalue <= 5
1格信号      1 < CSQvalue <= 2
0格信号      CSQvalue = 0

4G_DTU 开启通讯指令：0x2001
		关：0x0218




调试中出现的问题：
1.p_uart2_rxbuf未分配存储空间，导致进入硬件中断.
2.任务控制块类型定义错误，导致任务执行时进入硬件中断.
3.while循环判断参数必须初始化，不然无法进入循环.
4.DTU-Signal 和 DTU-Time 的优先级兑换解决了DTU时间消息被覆盖的情况
5.4G-DTU任务函数出现堆栈溢出，将原来分配的堆栈64改为128，从而解决堆栈溢出问题
6.各进程时间分配问题，优先级问题导致程序跑飞，进入硬件中断
（（1）接受4g DTU进程与另外4g进程调换，会导致进入硬件中断
（2）发送数据进程的时间过短，会导致另外两个进程-时间-信号无法接受到时间，信号信息
（3）时间过长会导致程序跑飞
未找到更合适的解决方法，通过串口打印，和长时间测试。此时间配置和优先级配置可以正常运行。
）

2022.10.10
为了方便后期升级调试，和减清代码量，便于传承和学习，将以前所做的打印调试均进行了封装，便于裁剪和查看。

2022.10.11
将4G信号采集与实时时间Time任务合并成一个任务（DTU_4G_Task），解决无法time信息被覆盖，或者4G信号被覆盖的情况，并减少程序复制度。
2022.10.18
在控制器pcb板上调试过程中发现程序经常跑飞，定位在OneNET_4G_DTU_Task任务，但未发现是堆栈溢出导致，而是延时函数导致，
怀疑是延时函数配置,变量大小分配不合理导致系统崩溃，通过优化函数结构相关逻辑解决了程序跑飞问题。
2022.10.24
增加看门狗处理功能。
2022.11.1
发现仪表时钟不对，通过排查为控制器CAN发送的时间数据不多，然后修改为普通数据CAN数据正常，使用变量数据发送就出错，通过printf打印数据结构体
正常，但是CAN发送出来的数据就出错，通过仿真器调试，CAN又恢复正常。不用调试模式，CAN发送的数据就错误，偶尔正常。最后在开发板上跑程序，没问题，
最终认为是硬件问题，通过跟换晶振时钟，CAN发送器都未解决此问题，怀疑是stm32芯片质量问题。通过更换了一个控制器板，数据发送恢复正常。
并优化了程序。